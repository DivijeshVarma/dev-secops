steps:
  - id: Build the Image
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        docker build -t $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG -f ./Dockerfile . &&
        docker image inspect $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG
        
  - id: Scan The Image
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud artifacts docker images scan $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG \
        --format='value(response.scan)' > /workspace/scan_id.txt

  - id: List Vulnerability Counts
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        echo "Results"
        gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
        --format='value(vulnerability.effectiveSeverity)' | sort | uniq -c || true
        
  - id: Check For Vulnerabilities within the Image
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
        --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq $_SEVERITY; \
        then echo 'Vulnerability check failed for docker image revision ID "$_VERSION_TAG", and will not be pushed to Artifact Registry Repo "$_CONTAINER_REPO_NAME" because "$_SEVERITY" checks are impacting the image and needs to be fixed' && exit 1; else exit 0; fi

  - id: Push Image to Artifact Registry
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        docker push $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG
        
  - id: Capture Image Digest Information
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud container images describe $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG \
        --format='get(image_summary.digest)' > /workspace/digest.txt
        
  - id: Change permissions on create_binauthz_policy.sh
    name: bash
    args: ['chmod', '+x', 'scripts/create_binauthz_policy.sh']
    
  - id: Apply Binary Authorization Custom Policy for Image
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/sh'
    args:
      - -c
      - |
        ./scripts/create_binauthz_policy.sh
        
  - id: Create a cloud deploy release and this will also deploy the release to the first target ie test
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud deploy releases create r-$REVISION_ID --project=$PROJECT_ID --region=$LOCATION --delivery-pipeline=ci-cd-test --images=my-app-image=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd@$(cat /workspace/digest.txt)

  - id: Wait for Load Balancer IP
    name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        # Wait up to 5 minutes for the external IP to be assigned.
        # This is crucial because the IP isn't available immediately after deployment.
        for i in $(seq 1 30); do
          SERVICE_IP=$(kubectl get service my-service -n default --output=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [[ -n "${SERVICE_IP}" ]]; then
            echo "Load Balancer IP found: ${SERVICE_IP}"
            # Write the IP directly to a file without 'export' or a variable name
            echo "${SERVICE_IP}" > /workspace/service_ip.txt
            exit 0
          fi
          echo "Waiting for Load Balancer IP... (attempt $i of 30)"
          sleep 10
        done
        echo "Timed out waiting for Load Balancer IP."
        exit 1

  - id: Trigger Web Security Scanner
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        # Read the IP from the file and store it in a local shell variable for this step
        TARGET_IP=$(cat /workspace/service_ip.txt)

        if [[ -z "${SERVICE_IP}" ]]; then
          echo "Error: Load Balancer IP not found. Skipping Web Security Scan."
          exit 1
        fi

        # Construct the full URL for the scanner.
        TARGET_URL="http://${TARGET_IP}"

        # Replace 'my-cloud-build-scan' with the name of your pre-configured scan.
        SCAN_CONFIG_NAME="projects/${PROJECT_ID}/scanConfigs/my-cloud-build-scan"

        echo "Starting Web Security Scanner run for URL: ${TARGET_URL}"
        gcloud alpha web-security-scanner scan-configs start ${SCAN_CONFIG_NAME} --scan-url="${TARGET_URL}"

        echo "Web Security Scanner run triggered. Check findings in Security Command Center."
        
  - id: Promote/deploy cloud deploy release to next stage ie staging
    name: gcr.io/cloud-builders/gcloud
    args: ['deploy', 'releases', 'promote', '--release=r-$REVISION_ID','--project=$PROJECT_ID','--region=$LOCATION','--delivery-pipeline=ci-cd-test', '--to-target=staging']
    
  - id: Promote/deploy cloud deploy release to next stage ie prod
    name: gcr.io/cloud-builders/gcloud
    args: ['deploy', 'releases', 'promote', '--release=r-$REVISION_ID','--project=$PROJECT_ID','--region=$LOCATION','--delivery-pipeline=ci-cd-test', '--to-target=prod']
images: ['$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG']

options:
  logging: CLOUD_LOGGING_ONLY
