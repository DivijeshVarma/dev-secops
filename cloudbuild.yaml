steps:
  - id: Build the Image
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        docker build -t $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG -f ./Dockerfile . &&
        docker image inspect $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG
        
  - id: Scan The Image
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud artifacts docker images scan $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG \
        --format='value(response.scan)' > /workspace/scan_id.txt

  - id: List Vulnerability Counts
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        echo "Results"
        gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
        --format='value(vulnerability.effectiveSeverity)' | sort | uniq -c || true
        
  - id: Check For Vulnerabilities within the Image
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
        --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq $_SEVERITY; \
        then echo 'Vulnerability check failed for docker image revision ID "$_VERSION_TAG", and will not be pushed to Artifact Registry Repo "$_CONTAINER_REPO_NAME" because "$_SEVERITY" checks are impacting the image and needs to be fixed' && exit 1; else exit 0; fi

  - id: Push Image to Artifact Registry
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        docker push $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG
        
  - id: Capture Image Digest Information
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud container images describe $LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG \
        --format='get(image_summary.digest)' > /workspace/digest.txt
        
  - id: Change permissions on create_binauthz_policy.sh
    name: bash
    args: ['chmod', '+x', 'scripts/create_binauthz_policy.sh']
    
  - id: Apply Binary Authorization Custom Policy for Image
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: '/bin/sh'
    args:
      - -c
      - |
        ./scripts/create_binauthz_policy.sh
  
  - id: Get Ingress Controller IP
    name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - -c
      - |
        # Get the external IP of the ingress-nginx service
        # Write the IP address directly to a file
        kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' > /workspace/ingress_ip.txt

        echo "Extracted Ingress IP: ${_INGRESS_IP}"

  - id: Update DNS A Record
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - -c
      - |
        # Update the A record for the specified domain
        gcloud dns record-sets transaction start --zone=infotechnologies-zone --project=divijesh-project

        # Remove any existing A records for the root domain
        gcloud dns record-sets transaction remove --name="infotechnologies.org." --type=A --zone=infotechnologies-zone --project=divijesh-project

        # Add the new A record with the ingress IP
        gcloud dns record-sets transaction add --name="infotechnologies.org." --type=A --ttl=300 --zone=infotechnologies-zone --project=divijesh-project --data="${_INGRESS_IP}"

        gcloud dns record-sets transaction execute --zone=infotechnologies-zone --project=divijesh-project

  - id: Create a cloud deploy release and this will also deploy the release to the first target ie test
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud deploy releases create r-$REVISION_ID --project=$PROJECT_ID --region=$LOCATION --delivery-pipeline=ci-cd-test --images=my-app-image=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd@$(cat /workspace/digest.txt)

  - id: Promote/deploy cloud deploy release to next stage ie staging
    name: gcr.io/cloud-builders/gcloud
    args: ['deploy', 'releases', 'promote', '--release=r-$REVISION_ID','--project=$PROJECT_ID','--region=$LOCATION','--delivery-pipeline=ci-cd-test', '--to-target=staging']
    
  - id: Promote/deploy cloud deploy release to next stage ie prod
    name: gcr.io/cloud-builders/gcloud
    args: ['deploy', 'releases', 'promote', '--release=r-$REVISION_ID','--project=$PROJECT_ID','--region=$LOCATION','--delivery-pipeline=ci-cd-test', '--to-target=prod']
images: ['$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG']
    
  substitutions:
    _INGRESS_IP: '$(cat /workspace/ingress_ip.txt)'
  options:
  dynamicSubstitutions: true  

options:
  logging: CLOUD_LOGGING_ONLY
